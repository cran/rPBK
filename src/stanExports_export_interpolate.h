// Generated by rstantools.  Do not edit by hand.

/*
    rPBK is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rPBK is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rPBK.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_export_interpolate_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_export_interpolate");
    reader.add_event(1, 1, "include", "/include/interpolation.stan");
    reader.add_event(1, 0, "start", "/include/interpolation.stan");
    reader.add_event(51, 50, "end", "/include/interpolation.stan");
    reader.add_event(51, 2, "restart", "model_export_interpolate");
    reader.add_event(68, 17, "end", "model_export_interpolate");
    return reader;
}
template <typename T0__, typename T1__>
int
findfirst(const T0__& t,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& xt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        int i(0);
        (void) i;  // dummy to suppress unused var warning
        stan::math::fill(i, std::numeric_limits<int>::min());
        stan::math::assign(i,0);
        current_statement_begin__ = 4;
        if (as_bool(logical_eq(t, max(xt)))) {
            current_statement_begin__ = 5;
            stan::math::assign(i, (num_elements(xt) - 1));
            current_statement_begin__ = 6;
            return stan::math::promote_scalar<fun_return_scalar_t__>(i);
        } else if (as_bool((primitive_value(logical_lt(t, min(xt))) || primitive_value(logical_gt(t, max(xt)))))) {
            current_statement_begin__ = 8;
            return stan::math::promote_scalar<fun_return_scalar_t__>(i);
        } else {
            current_statement_begin__ = 10;
            while (as_bool(logical_gte(t, get_base1(xt, (i + 1), "xt", 1)))) {
                current_statement_begin__ = 11;
                stan::math::assign(i, (i + 1));
            }
            current_statement_begin__ = 13;
            return stan::math::promote_scalar<fun_return_scalar_t__>(i);
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct findfirst_functor__ {
    template <typename T0__, typename T1__>
        int
    operator()(const T0__& t,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& xt, std::ostream* pstream__) const {
        return findfirst(t, xt, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
interpolate(const T0__& x,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& xpt,
                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& ypt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 18;
        if (as_bool((primitive_value(logical_gte(x, min(xpt))) && primitive_value(logical_lte(x, max(xpt)))))) {
            {
            current_statement_begin__ = 19;
            int idx(0);
            (void) idx;  // dummy to suppress unused var warning
            stan::math::fill(idx, std::numeric_limits<int>::min());
            stan::math::assign(idx,findfirst(x, xpt, pstream__));
            current_statement_begin__ = 20;
            return stan::math::promote_scalar<fun_return_scalar_t__>((get_base1(ypt, idx, "ypt", 1) + (((x - get_base1(xpt, idx, "xpt", 1)) * (get_base1(ypt, (idx + 1), "ypt", 1) - get_base1(ypt, idx, "ypt", 1))) / (get_base1(xpt, (idx + 1), "xpt", 1) - get_base1(xpt, idx, "xpt", 1)))));
            }
        } else {
            current_statement_begin__ = 22;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0.0);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct interpolate_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& x,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& xpt,
                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& ypt, std::ostream* pstream__) const {
        return interpolate(x, xpt, ypt, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T7__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
exact_AD_long(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& time,
                  const int& N_time,
                  const T2__& tacc,
                  const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& E,
                  const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& I,
                  const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& U,
                  const int& N_comp,
                  const T7__& Cx, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 27;
        validate_non_negative_index("E_inv", "N_comp", N_comp);
        validate_non_negative_index("E_inv", "N_comp", N_comp);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> E_inv(N_comp, N_comp);
        stan::math::initialize(E_inv, DUMMY_VAR__);
        stan::math::fill(E_inv, DUMMY_VAR__);
        stan::math::assign(E_inv,inverse(E));
        current_statement_begin__ = 28;
        validate_non_negative_index("E_out", "N_comp", N_comp);
        validate_non_negative_index("E_out", "N_time", N_time);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> E_out(N_comp, N_time);
        stan::math::initialize(E_out, DUMMY_VAR__);
        stan::math::fill(E_out, DUMMY_VAR__);
        current_statement_begin__ = 29;
        for (int i = 1; i <= N_time; ++i) {
            current_statement_begin__ = 30;
            if (as_bool(logical_lt(get_base1(time, i, "time", 1), tacc))) {
                current_statement_begin__ = 31;
                stan::model::assign(E_out, 
                            stan::model::cons_list(stan::model::index_min_max(1, N_comp), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            multiply(multiply(multiply(E_inv, subtract(matrix_exp(multiply(get_base1(time, i, "time", 1), E)), I)), U), Cx), 
                            "assigning variable E_out");
            } else {
                current_statement_begin__ = 33;
                stan::model::assign(E_out, 
                            stan::model::cons_list(stan::model::index_min_max(1, N_comp), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            multiply(multiply(multiply(E_inv, subtract(matrix_exp(multiply(get_base1(time, i, "time", 1), E)), matrix_exp(multiply((get_base1(time, i, "time", 1) - tacc), E)))), U), Cx), 
                            "assigning variable E_out");
            }
        }
        current_statement_begin__ = 36;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(E_out));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exact_AD_long_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T7__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& time,
                  const int& N_time,
                  const T2__& tacc,
                  const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& E,
                  const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& I,
                  const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& U,
                  const int& N_comp,
                  const T7__& Cx, std::ostream* pstream__) const {
        return exact_AD_long(time, N_time, tacc, E, I, U, N_comp, Cx, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
matrix_E(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& ke,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& k,
             const int& N_k, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 41;
        validate_non_negative_index("m", "N_k", N_k);
        validate_non_negative_index("m", "N_k", N_k);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> m(N_k, N_k);
        stan::math::initialize(m, DUMMY_VAR__);
        stan::math::fill(m, DUMMY_VAR__);
        stan::math::assign(m,add_diag(k, rep_vector(0, N_k)));
        current_statement_begin__ = 42;
        validate_non_negative_index("diag_k", "N_k", N_k);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> diag_k(N_k);
        stan::math::initialize(diag_k, DUMMY_VAR__);
        stan::math::fill(diag_k, DUMMY_VAR__);
        stan::math::assign(diag_k,subtract(minus(ke), multiply(m, rep_vector(1, N_k))));
        current_statement_begin__ = 43;
        validate_non_negative_index("matrix_E", "N_k", N_k);
        validate_non_negative_index("matrix_E", "N_k", N_k);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> matrix_E(N_k, N_k);
        stan::math::initialize(matrix_E, DUMMY_VAR__);
        stan::math::fill(matrix_E, DUMMY_VAR__);
        stan::math::assign(matrix_E,add_diag(k, diag_k));
        current_statement_begin__ = 45;
        return stan::math::promote_scalar<fun_return_scalar_t__>(matrix_E);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct matrix_E_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& ke,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& k,
             const int& N_k, std::ostream* pstream__) const {
        return matrix_E(ke, k, N_k, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
matrix_I(const int& k, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 49;
        validate_non_negative_index("I", "k", k);
        validate_non_negative_index("I", "k", k);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> I(k, k);
        stan::math::initialize(I, DUMMY_VAR__);
        stan::math::fill(I, DUMMY_VAR__);
        stan::math::assign(I,add_diag(rep_matrix(0, k, k), 1));
        current_statement_begin__ = 50;
        return stan::math::promote_scalar<fun_return_scalar_t__>(I);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct matrix_I_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& k, std::ostream* pstream__) const {
        return matrix_I(k, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_export_interpolate
  : public stan::model::model_base_crtp<model_export_interpolate> {
private:
        double x;
        int N;
        vector_d xpt;
        vector_d ypt;
public:
    model_export_interpolate(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_export_interpolate(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_export_interpolate_namespace::model_export_interpolate";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "x", "double", context__.to_vec());
            x = double(0);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            x = vals_r__[pos__++];
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 56;
            validate_non_negative_index("xpt", "N", N);
            context__.validate_dims("data initialization", "xpt", "vector_d", context__.to_vec(N));
            xpt = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("xpt");
            pos__ = 0;
            size_t xpt_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < xpt_j_1_max__; ++j_1__) {
                xpt(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 57;
            validate_non_negative_index("ypt", "N", N);
            context__.validate_dims("data initialization", "ypt", "vector_d", context__.to_vec(N));
            ypt = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("ypt");
            pos__ = 0;
            size_t ypt_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < ypt_j_1_max__; ++j_1__) {
                ypt(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_export_interpolate() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            // model body
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("y");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_export_interpolate_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 64;
            double y;
            (void) y;  // dummy to suppress unused var warning
            stan::math::initialize(y, DUMMY_VAR__);
            stan::math::fill(y, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 65;
            stan::math::assign(y, interpolate(x, xpt, ypt, pstream__));
            // validate, write generated quantities
            current_statement_begin__ = 64;
            vars__.push_back(y);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_export_interpolate";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "y";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "y";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_export_interpolate_namespace::model_export_interpolate stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
