// Generated by rstantools.  Do not edit by hand.

/*
    rPBK is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rPBK is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rPBK.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_PBK_AD_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_PBK_AD");
    reader.add_event(2, 2, "include", "/include/interpolation.stan");
    reader.add_event(2, 0, "start", "/include/interpolation.stan");
    reader.add_event(52, 50, "end", "/include/interpolation.stan");
    reader.add_event(52, 3, "restart", "model_PBK_AD");
    reader.add_event(156, 105, "end", "model_PBK_AD");
    return reader;
}
template <typename T0__, typename T1__>
int
findfirst(const T0__& t,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& xt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        int i(0);
        (void) i;  // dummy to suppress unused var warning
        stan::math::fill(i, std::numeric_limits<int>::min());
        stan::math::assign(i,0);
        current_statement_begin__ = 5;
        if (as_bool(logical_eq(t, max(xt)))) {
            current_statement_begin__ = 6;
            stan::math::assign(i, (num_elements(xt) - 1));
            current_statement_begin__ = 7;
            return stan::math::promote_scalar<fun_return_scalar_t__>(i);
        } else if (as_bool((primitive_value(logical_lt(t, min(xt))) || primitive_value(logical_gt(t, max(xt)))))) {
            current_statement_begin__ = 9;
            return stan::math::promote_scalar<fun_return_scalar_t__>(i);
        } else {
            current_statement_begin__ = 11;
            while (as_bool(logical_gte(t, get_base1(xt, (i + 1), "xt", 1)))) {
                current_statement_begin__ = 12;
                stan::math::assign(i, (i + 1));
            }
            current_statement_begin__ = 14;
            return stan::math::promote_scalar<fun_return_scalar_t__>(i);
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct findfirst_functor__ {
    template <typename T0__, typename T1__>
        int
    operator()(const T0__& t,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& xt, std::ostream* pstream__) const {
        return findfirst(t, xt, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
interpolate(const T0__& x,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& xpt,
                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& ypt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 19;
        if (as_bool((primitive_value(logical_gte(x, min(xpt))) && primitive_value(logical_lte(x, max(xpt)))))) {
            {
            current_statement_begin__ = 20;
            int idx(0);
            (void) idx;  // dummy to suppress unused var warning
            stan::math::fill(idx, std::numeric_limits<int>::min());
            stan::math::assign(idx,findfirst(x, xpt, pstream__));
            current_statement_begin__ = 21;
            return stan::math::promote_scalar<fun_return_scalar_t__>((get_base1(ypt, idx, "ypt", 1) + (((x - get_base1(xpt, idx, "xpt", 1)) * (get_base1(ypt, (idx + 1), "ypt", 1) - get_base1(ypt, idx, "ypt", 1))) / (get_base1(xpt, (idx + 1), "xpt", 1) - get_base1(xpt, idx, "xpt", 1)))));
            }
        } else {
            current_statement_begin__ = 23;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0.0);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct interpolate_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& x,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& xpt,
                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& ypt, std::ostream* pstream__) const {
        return interpolate(x, xpt, ypt, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T7__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
exact_AD_long(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& time,
                  const int& N_time,
                  const T2__& tacc,
                  const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& E,
                  const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& I,
                  const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& U,
                  const int& N_comp,
                  const T7__& Cx, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 28;
        validate_non_negative_index("E_inv", "N_comp", N_comp);
        validate_non_negative_index("E_inv", "N_comp", N_comp);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> E_inv(N_comp, N_comp);
        stan::math::initialize(E_inv, DUMMY_VAR__);
        stan::math::fill(E_inv, DUMMY_VAR__);
        stan::math::assign(E_inv,inverse(E));
        current_statement_begin__ = 29;
        validate_non_negative_index("E_out", "N_comp", N_comp);
        validate_non_negative_index("E_out", "N_time", N_time);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> E_out(N_comp, N_time);
        stan::math::initialize(E_out, DUMMY_VAR__);
        stan::math::fill(E_out, DUMMY_VAR__);
        current_statement_begin__ = 30;
        for (int i = 1; i <= N_time; ++i) {
            current_statement_begin__ = 31;
            if (as_bool(logical_lt(get_base1(time, i, "time", 1), tacc))) {
                current_statement_begin__ = 32;
                stan::model::assign(E_out, 
                            stan::model::cons_list(stan::model::index_min_max(1, N_comp), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            multiply(multiply(multiply(E_inv, subtract(matrix_exp(multiply(get_base1(time, i, "time", 1), E)), I)), U), Cx), 
                            "assigning variable E_out");
            } else {
                current_statement_begin__ = 34;
                stan::model::assign(E_out, 
                            stan::model::cons_list(stan::model::index_min_max(1, N_comp), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            multiply(multiply(multiply(E_inv, subtract(matrix_exp(multiply(get_base1(time, i, "time", 1), E)), matrix_exp(multiply((get_base1(time, i, "time", 1) - tacc), E)))), U), Cx), 
                            "assigning variable E_out");
            }
        }
        current_statement_begin__ = 37;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(E_out));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exact_AD_long_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T7__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& time,
                  const int& N_time,
                  const T2__& tacc,
                  const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& E,
                  const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& I,
                  const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& U,
                  const int& N_comp,
                  const T7__& Cx, std::ostream* pstream__) const {
        return exact_AD_long(time, N_time, tacc, E, I, U, N_comp, Cx, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
matrix_E(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& ke,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& k,
             const int& N_k, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 42;
        validate_non_negative_index("m", "N_k", N_k);
        validate_non_negative_index("m", "N_k", N_k);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> m(N_k, N_k);
        stan::math::initialize(m, DUMMY_VAR__);
        stan::math::fill(m, DUMMY_VAR__);
        stan::math::assign(m,add_diag(k, rep_vector(0, N_k)));
        current_statement_begin__ = 43;
        validate_non_negative_index("diag_k", "N_k", N_k);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> diag_k(N_k);
        stan::math::initialize(diag_k, DUMMY_VAR__);
        stan::math::fill(diag_k, DUMMY_VAR__);
        stan::math::assign(diag_k,subtract(minus(ke), multiply(m, rep_vector(1, N_k))));
        current_statement_begin__ = 44;
        validate_non_negative_index("matrix_E_rtn", "N_k", N_k);
        validate_non_negative_index("matrix_E_rtn", "N_k", N_k);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> matrix_E_rtn(N_k, N_k);
        stan::math::initialize(matrix_E_rtn, DUMMY_VAR__);
        stan::math::fill(matrix_E_rtn, DUMMY_VAR__);
        stan::math::assign(matrix_E_rtn,add_diag(k, diag_k));
        current_statement_begin__ = 46;
        return stan::math::promote_scalar<fun_return_scalar_t__>(matrix_E_rtn);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct matrix_E_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& ke,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& k,
             const int& N_k, std::ostream* pstream__) const {
        return matrix_E(ke, k, N_k, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
matrix_I(const int& k, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 50;
        validate_non_negative_index("I", "k", k);
        validate_non_negative_index("I", "k", k);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> I(k, k);
        stan::math::initialize(I, DUMMY_VAR__);
        stan::math::fill(I, DUMMY_VAR__);
        stan::math::assign(I,add_diag(rep_matrix(0, k, k), 1));
        current_statement_begin__ = 51;
        return stan::math::promote_scalar<fun_return_scalar_t__>(I);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct matrix_I_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& k, std::ostream* pstream__) const {
        return matrix_I(k, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_PBK_AD
  : public stan::model::model_base_crtp<model_PBK_AD> {
private:
        int N_obs_comp;
        int N_rep;
        int N_comp;
        vector_d time_obs_comp;
        vector_d ke_nest;
        vector_d ku_nest;
        matrix_d k_nest;
        std::vector<std::vector<std::vector<double> > > val_obs_comp;
        double t0;
        double tacc;
        double val_obs_exp;
public:
    model_PBK_AD(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_PBK_AD(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_PBK_AD_namespace::model_PBK_AD";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "N_obs_comp", "int", context__.to_vec());
            N_obs_comp = int(0);
            vals_i__ = context__.vals_i("N_obs_comp");
            pos__ = 0;
            N_obs_comp = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_obs_comp", N_obs_comp, 0);
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "N_rep", "int", context__.to_vec());
            N_rep = int(0);
            vals_i__ = context__.vals_i("N_rep");
            pos__ = 0;
            N_rep = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_rep", N_rep, 0);
            current_statement_begin__ = 58;
            context__.validate_dims("data initialization", "N_comp", "int", context__.to_vec());
            N_comp = int(0);
            vals_i__ = context__.vals_i("N_comp");
            pos__ = 0;
            N_comp = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_comp", N_comp, 0);
            current_statement_begin__ = 60;
            validate_non_negative_index("time_obs_comp", "N_obs_comp", N_obs_comp);
            context__.validate_dims("data initialization", "time_obs_comp", "vector_d", context__.to_vec(N_obs_comp));
            time_obs_comp = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_obs_comp);
            vals_r__ = context__.vals_r("time_obs_comp");
            pos__ = 0;
            size_t time_obs_comp_j_1_max__ = N_obs_comp;
            for (size_t j_1__ = 0; j_1__ < time_obs_comp_j_1_max__; ++j_1__) {
                time_obs_comp(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 62;
            validate_non_negative_index("ke_nest", "N_comp", N_comp);
            context__.validate_dims("data initialization", "ke_nest", "vector_d", context__.to_vec(N_comp));
            ke_nest = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_comp);
            vals_r__ = context__.vals_r("ke_nest");
            pos__ = 0;
            size_t ke_nest_j_1_max__ = N_comp;
            for (size_t j_1__ = 0; j_1__ < ke_nest_j_1_max__; ++j_1__) {
                ke_nest(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 63;
            validate_non_negative_index("ku_nest", "N_comp", N_comp);
            context__.validate_dims("data initialization", "ku_nest", "vector_d", context__.to_vec(N_comp));
            ku_nest = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_comp);
            vals_r__ = context__.vals_r("ku_nest");
            pos__ = 0;
            size_t ku_nest_j_1_max__ = N_comp;
            for (size_t j_1__ = 0; j_1__ < ku_nest_j_1_max__; ++j_1__) {
                ku_nest(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 64;
            validate_non_negative_index("k_nest", "N_comp", N_comp);
            validate_non_negative_index("k_nest", "N_comp", N_comp);
            context__.validate_dims("data initialization", "k_nest", "matrix_d", context__.to_vec(N_comp,N_comp));
            k_nest = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_comp, N_comp);
            vals_r__ = context__.vals_r("k_nest");
            pos__ = 0;
            size_t k_nest_j_2_max__ = N_comp;
            size_t k_nest_j_1_max__ = N_comp;
            for (size_t j_2__ = 0; j_2__ < k_nest_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < k_nest_j_1_max__; ++j_1__) {
                    k_nest(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 66;
            validate_non_negative_index("val_obs_comp", "N_obs_comp", N_obs_comp);
            validate_non_negative_index("val_obs_comp", "N_rep", N_rep);
            validate_non_negative_index("val_obs_comp", "N_comp", N_comp);
            context__.validate_dims("data initialization", "val_obs_comp", "double", context__.to_vec(N_obs_comp,N_rep,N_comp));
            val_obs_comp = std::vector<std::vector<std::vector<double> > >(N_obs_comp, std::vector<std::vector<double> >(N_rep, std::vector<double>(N_comp, double(0))));
            vals_r__ = context__.vals_r("val_obs_comp");
            pos__ = 0;
            size_t val_obs_comp_k_0_max__ = N_obs_comp;
            size_t val_obs_comp_k_1_max__ = N_rep;
            size_t val_obs_comp_k_2_max__ = N_comp;
            for (size_t k_2__ = 0; k_2__ < val_obs_comp_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < val_obs_comp_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < val_obs_comp_k_0_max__; ++k_0__) {
                        val_obs_comp[k_0__][k_1__][k_2__] = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 68;
            context__.validate_dims("data initialization", "t0", "double", context__.to_vec());
            t0 = double(0);
            vals_r__ = context__.vals_r("t0");
            pos__ = 0;
            t0 = vals_r__[pos__++];
            current_statement_begin__ = 70;
            context__.validate_dims("data initialization", "tacc", "double", context__.to_vec());
            tacc = double(0);
            vals_r__ = context__.vals_r("tacc");
            pos__ = 0;
            tacc = vals_r__[pos__++];
            current_statement_begin__ = 72;
            context__.validate_dims("data initialization", "val_obs_exp", "double", context__.to_vec());
            val_obs_exp = double(0);
            vals_r__ = context__.vals_r("val_obs_exp");
            pos__ = 0;
            val_obs_exp = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 76;
            validate_non_negative_index("log10ku", "N_comp", N_comp);
            num_params_r__ += (1 * N_comp);
            current_statement_begin__ = 77;
            validate_non_negative_index("log10ke", "N_comp", N_comp);
            num_params_r__ += (1 * N_comp);
            current_statement_begin__ = 79;
            validate_non_negative_index("log10k", "N_comp", N_comp);
            validate_non_negative_index("log10k", "N_comp", N_comp);
            num_params_r__ += ((1 * N_comp) * N_comp);
            current_statement_begin__ = 81;
            validate_non_negative_index("sigma", "N_comp", N_comp);
            num_params_r__ += (1 * N_comp);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_PBK_AD() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 76;
        if (!(context__.contains_r("log10ku")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log10ku missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log10ku");
        pos__ = 0U;
        validate_non_negative_index("log10ku", "N_comp", N_comp);
        context__.validate_dims("parameter initialization", "log10ku", "double", context__.to_vec(N_comp));
        std::vector<double> log10ku(N_comp, double(0));
        size_t log10ku_k_0_max__ = N_comp;
        for (size_t k_0__ = 0; k_0__ < log10ku_k_0_max__; ++k_0__) {
            log10ku[k_0__] = vals_r__[pos__++];
        }
        size_t log10ku_i_0_max__ = N_comp;
        for (size_t i_0__ = 0; i_0__ < log10ku_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(log10ku[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log10ku: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 77;
        if (!(context__.contains_r("log10ke")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log10ke missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log10ke");
        pos__ = 0U;
        validate_non_negative_index("log10ke", "N_comp", N_comp);
        context__.validate_dims("parameter initialization", "log10ke", "double", context__.to_vec(N_comp));
        std::vector<double> log10ke(N_comp, double(0));
        size_t log10ke_k_0_max__ = N_comp;
        for (size_t k_0__ = 0; k_0__ < log10ke_k_0_max__; ++k_0__) {
            log10ke[k_0__] = vals_r__[pos__++];
        }
        size_t log10ke_i_0_max__ = N_comp;
        for (size_t i_0__ = 0; i_0__ < log10ke_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(log10ke[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log10ke: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 79;
        if (!(context__.contains_r("log10k")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log10k missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log10k");
        pos__ = 0U;
        validate_non_negative_index("log10k", "N_comp", N_comp);
        validate_non_negative_index("log10k", "N_comp", N_comp);
        context__.validate_dims("parameter initialization", "log10k", "double", context__.to_vec(N_comp,N_comp));
        std::vector<std::vector<double> > log10k(N_comp, std::vector<double>(N_comp, double(0)));
        size_t log10k_k_0_max__ = N_comp;
        size_t log10k_k_1_max__ = N_comp;
        for (size_t k_1__ = 0; k_1__ < log10k_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < log10k_k_0_max__; ++k_0__) {
                log10k[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t log10k_i_0_max__ = N_comp;
        size_t log10k_i_1_max__ = N_comp;
        for (size_t i_0__ = 0; i_0__ < log10k_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < log10k_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_unconstrain(log10k[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log10k: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 81;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "N_comp", N_comp);
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec(N_comp));
        std::vector<double> sigma(N_comp, double(0));
        size_t sigma_k_0_max__ = N_comp;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            sigma[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_i_0_max__ = N_comp;
        for (size_t i_0__ = 0; i_0__ < sigma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 76;
            std::vector<local_scalar_t__> log10ku;
            size_t log10ku_d_0_max__ = N_comp;
            log10ku.reserve(log10ku_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < log10ku_d_0_max__; ++d_0__) {
                if (jacobian__)
                    log10ku.push_back(in__.scalar_constrain(lp__));
                else
                    log10ku.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 77;
            std::vector<local_scalar_t__> log10ke;
            size_t log10ke_d_0_max__ = N_comp;
            log10ke.reserve(log10ke_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < log10ke_d_0_max__; ++d_0__) {
                if (jacobian__)
                    log10ke.push_back(in__.scalar_constrain(lp__));
                else
                    log10ke.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 79;
            std::vector<std::vector<local_scalar_t__> > log10k;
            size_t log10k_d_0_max__ = N_comp;
            size_t log10k_d_1_max__ = N_comp;
            log10k.resize(log10k_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < log10k_d_0_max__; ++d_0__) {
                log10k[d_0__].reserve(log10k_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < log10k_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        log10k[d_0__].push_back(in__.scalar_constrain(lp__));
                    else
                        log10k[d_0__].push_back(in__.scalar_constrain());
                }
            }
            current_statement_begin__ = 81;
            std::vector<local_scalar_t__> sigma;
            size_t sigma_d_0_max__ = N_comp;
            sigma.reserve(sigma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 85;
            validate_non_negative_index("Cpred_comp", "N_obs_comp", N_obs_comp);
            validate_non_negative_index("Cpred_comp", "N_comp", N_comp);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Cpred_comp(N_obs_comp, N_comp);
            stan::math::initialize(Cpred_comp, DUMMY_VAR__);
            stan::math::fill(Cpred_comp, DUMMY_VAR__);
            current_statement_begin__ = 87;
            validate_non_negative_index("ku", "N_comp", N_comp);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ku(N_comp);
            stan::math::initialize(ku, DUMMY_VAR__);
            stan::math::fill(ku, DUMMY_VAR__);
            current_statement_begin__ = 88;
            validate_non_negative_index("ke", "N_comp", N_comp);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ke(N_comp);
            stan::math::initialize(ke, DUMMY_VAR__);
            stan::math::fill(ke, DUMMY_VAR__);
            current_statement_begin__ = 89;
            validate_non_negative_index("k", "N_comp", N_comp);
            validate_non_negative_index("k", "N_comp", N_comp);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> k(N_comp, N_comp);
            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k, DUMMY_VAR__);
            current_statement_begin__ = 91;
            validate_non_negative_index("E", "N_comp", N_comp);
            validate_non_negative_index("E", "N_comp", N_comp);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> E(N_comp, N_comp);
            stan::math::initialize(E, DUMMY_VAR__);
            stan::math::fill(E, DUMMY_VAR__);
            current_statement_begin__ = 92;
            validate_non_negative_index("I", "N_comp", N_comp);
            validate_non_negative_index("I", "N_comp", N_comp);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> I(N_comp, N_comp);
            stan::math::initialize(I, DUMMY_VAR__);
            stan::math::fill(I, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 94;
            for (int i = 1; i <= N_comp; ++i) {
                current_statement_begin__ = 95;
                stan::model::assign(ku, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_eq(get_base1(ku_nest, i, "ku_nest", 1), 0) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(pow(10, get_base1(log10ku, i, "log10ku", 1))) ), 
                            "assigning variable ku");
                current_statement_begin__ = 96;
                stan::model::assign(ke, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_eq(get_base1(ke_nest, i, "ke_nest", 1), 0) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(pow(10, get_base1(log10ke, i, "log10ke", 1))) ), 
                            "assigning variable ke");
                current_statement_begin__ = 97;
                for (int j = 1; j <= N_comp; ++j) {
                    current_statement_begin__ = 98;
                    stan::model::assign(k, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (logical_eq(get_base1(k_nest, i, j, "k_nest", 1), 0) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(pow(10, get_base1(get_base1(log10k, i, "log10k", 1), j, "log10k", 2))) ), 
                                "assigning variable k");
                }
            }
            current_statement_begin__ = 102;
            stan::math::assign(E, matrix_E(ke, k, N_comp, pstream__));
            current_statement_begin__ = 103;
            stan::math::assign(I, matrix_I(N_comp, pstream__));
            current_statement_begin__ = 105;
            stan::math::assign(Cpred_comp, exact_AD_long(time_obs_comp, N_obs_comp, tacc, E, I, ku, N_comp, val_obs_exp, pstream__));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 85;
            size_t Cpred_comp_j_1_max__ = N_obs_comp;
            size_t Cpred_comp_j_2_max__ = N_comp;
            for (size_t j_1__ = 0; j_1__ < Cpred_comp_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Cpred_comp_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Cpred_comp(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Cpred_comp" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Cpred_comp: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 87;
            size_t ku_j_1_max__ = N_comp;
            for (size_t j_1__ = 0; j_1__ < ku_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(ku(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: ku" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable ku: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 88;
            size_t ke_j_1_max__ = N_comp;
            for (size_t j_1__ = 0; j_1__ < ke_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(ke(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: ke" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable ke: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 89;
            size_t k_j_1_max__ = N_comp;
            size_t k_j_2_max__ = N_comp;
            for (size_t j_1__ = 0; j_1__ < k_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < k_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(k(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: k" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable k: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 91;
            size_t E_j_1_max__ = N_comp;
            size_t E_j_2_max__ = N_comp;
            for (size_t j_1__ = 0; j_1__ < E_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < E_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(E(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: E" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable E: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 92;
            size_t I_j_1_max__ = N_comp;
            size_t I_j_2_max__ = N_comp;
            for (size_t j_1__ = 0; j_1__ < I_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < I_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(I(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: I" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable I: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 119;
            lp_accum__.add(uniform_log(log10ku, -(5), 5));
            current_statement_begin__ = 120;
            lp_accum__.add(uniform_log(log10ke, -(5), 5));
            current_statement_begin__ = 122;
            for (int i_comp = 1; i_comp <= N_comp; ++i_comp) {
                current_statement_begin__ = 123;
                lp_accum__.add(uniform_log(stan::model::rvalue(log10k, stan::model::cons_list(stan::model::index_min_max(1, N_comp), stan::model::cons_list(stan::model::index_uni(i_comp), stan::model::nil_index_list())), "log10k"), -(5), 5));
            }
            current_statement_begin__ = 126;
            lp_accum__.add(gamma_log(sigma, 0.01, 0.01));
            current_statement_begin__ = 128;
            for (int i_rep = 1; i_rep <= N_rep; ++i_rep) {
                current_statement_begin__ = 129;
                for (int i = 1; i <= N_obs_comp; ++i) {
                    current_statement_begin__ = 130;
                    for (int i_comp = 1; i_comp <= N_comp; ++i_comp) {
                        current_statement_begin__ = 131;
                        lp_accum__.add(normal_log(get_base1(get_base1(get_base1(val_obs_comp, i, "val_obs_comp", 1), i_rep, "val_obs_comp", 2), i_comp, "val_obs_comp", 3), get_base1(Cpred_comp, i, i_comp, "Cpred_comp", 1), get_base1(sigma, i_comp, "sigma", 1)));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("log10ku");
        names__.push_back("log10ke");
        names__.push_back("log10k");
        names__.push_back("sigma");
        names__.push_back("Cpred_comp");
        names__.push_back("ku");
        names__.push_back("ke");
        names__.push_back("k");
        names__.push_back("E");
        names__.push_back("I");
        names__.push_back("val_pred_comp");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N_comp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_comp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_comp);
        dims__.push_back(N_comp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_comp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_obs_comp);
        dims__.push_back(N_comp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_comp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_comp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_comp);
        dims__.push_back(N_comp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_comp);
        dims__.push_back(N_comp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_comp);
        dims__.push_back(N_comp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_obs_comp);
        dims__.push_back(N_comp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_obs_comp);
        dims__.push_back(N_rep);
        dims__.push_back(N_comp);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_PBK_AD_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> log10ku;
        size_t log10ku_d_0_max__ = N_comp;
        log10ku.reserve(log10ku_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < log10ku_d_0_max__; ++d_0__) {
            log10ku.push_back(in__.scalar_constrain());
        }
        size_t log10ku_k_0_max__ = N_comp;
        for (size_t k_0__ = 0; k_0__ < log10ku_k_0_max__; ++k_0__) {
            vars__.push_back(log10ku[k_0__]);
        }
        std::vector<double> log10ke;
        size_t log10ke_d_0_max__ = N_comp;
        log10ke.reserve(log10ke_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < log10ke_d_0_max__; ++d_0__) {
            log10ke.push_back(in__.scalar_constrain());
        }
        size_t log10ke_k_0_max__ = N_comp;
        for (size_t k_0__ = 0; k_0__ < log10ke_k_0_max__; ++k_0__) {
            vars__.push_back(log10ke[k_0__]);
        }
        std::vector<std::vector<double> > log10k;
        size_t log10k_d_0_max__ = N_comp;
        size_t log10k_d_1_max__ = N_comp;
        log10k.resize(log10k_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < log10k_d_0_max__; ++d_0__) {
            log10k[d_0__].reserve(log10k_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < log10k_d_1_max__; ++d_1__) {
                log10k[d_0__].push_back(in__.scalar_constrain());
            }
        }
        size_t log10k_k_0_max__ = N_comp;
        size_t log10k_k_1_max__ = N_comp;
        for (size_t k_1__ = 0; k_1__ < log10k_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < log10k_k_0_max__; ++k_0__) {
                vars__.push_back(log10k[k_0__][k_1__]);
            }
        }
        std::vector<double> sigma;
        size_t sigma_d_0_max__ = N_comp;
        sigma.reserve(sigma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_k_0_max__ = N_comp;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 85;
            validate_non_negative_index("Cpred_comp", "N_obs_comp", N_obs_comp);
            validate_non_negative_index("Cpred_comp", "N_comp", N_comp);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Cpred_comp(N_obs_comp, N_comp);
            stan::math::initialize(Cpred_comp, DUMMY_VAR__);
            stan::math::fill(Cpred_comp, DUMMY_VAR__);
            current_statement_begin__ = 87;
            validate_non_negative_index("ku", "N_comp", N_comp);
            Eigen::Matrix<double, Eigen::Dynamic, 1> ku(N_comp);
            stan::math::initialize(ku, DUMMY_VAR__);
            stan::math::fill(ku, DUMMY_VAR__);
            current_statement_begin__ = 88;
            validate_non_negative_index("ke", "N_comp", N_comp);
            Eigen::Matrix<double, Eigen::Dynamic, 1> ke(N_comp);
            stan::math::initialize(ke, DUMMY_VAR__);
            stan::math::fill(ke, DUMMY_VAR__);
            current_statement_begin__ = 89;
            validate_non_negative_index("k", "N_comp", N_comp);
            validate_non_negative_index("k", "N_comp", N_comp);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> k(N_comp, N_comp);
            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k, DUMMY_VAR__);
            current_statement_begin__ = 91;
            validate_non_negative_index("E", "N_comp", N_comp);
            validate_non_negative_index("E", "N_comp", N_comp);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> E(N_comp, N_comp);
            stan::math::initialize(E, DUMMY_VAR__);
            stan::math::fill(E, DUMMY_VAR__);
            current_statement_begin__ = 92;
            validate_non_negative_index("I", "N_comp", N_comp);
            validate_non_negative_index("I", "N_comp", N_comp);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> I(N_comp, N_comp);
            stan::math::initialize(I, DUMMY_VAR__);
            stan::math::fill(I, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 94;
            for (int i = 1; i <= N_comp; ++i) {
                current_statement_begin__ = 95;
                stan::model::assign(ku, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_eq(get_base1(ku_nest, i, "ku_nest", 1), 0) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(pow(10, get_base1(log10ku, i, "log10ku", 1))) ), 
                            "assigning variable ku");
                current_statement_begin__ = 96;
                stan::model::assign(ke, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_eq(get_base1(ke_nest, i, "ke_nest", 1), 0) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(pow(10, get_base1(log10ke, i, "log10ke", 1))) ), 
                            "assigning variable ke");
                current_statement_begin__ = 97;
                for (int j = 1; j <= N_comp; ++j) {
                    current_statement_begin__ = 98;
                    stan::model::assign(k, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (logical_eq(get_base1(k_nest, i, j, "k_nest", 1), 0) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(pow(10, get_base1(get_base1(log10k, i, "log10k", 1), j, "log10k", 2))) ), 
                                "assigning variable k");
                }
            }
            current_statement_begin__ = 102;
            stan::math::assign(E, matrix_E(ke, k, N_comp, pstream__));
            current_statement_begin__ = 103;
            stan::math::assign(I, matrix_I(N_comp, pstream__));
            current_statement_begin__ = 105;
            stan::math::assign(Cpred_comp, exact_AD_long(time_obs_comp, N_obs_comp, tacc, E, I, ku, N_comp, val_obs_exp, pstream__));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t Cpred_comp_j_2_max__ = N_comp;
                size_t Cpred_comp_j_1_max__ = N_obs_comp;
                for (size_t j_2__ = 0; j_2__ < Cpred_comp_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Cpred_comp_j_1_max__; ++j_1__) {
                        vars__.push_back(Cpred_comp(j_1__, j_2__));
                    }
                }
                size_t ku_j_1_max__ = N_comp;
                for (size_t j_1__ = 0; j_1__ < ku_j_1_max__; ++j_1__) {
                    vars__.push_back(ku(j_1__));
                }
                size_t ke_j_1_max__ = N_comp;
                for (size_t j_1__ = 0; j_1__ < ke_j_1_max__; ++j_1__) {
                    vars__.push_back(ke(j_1__));
                }
                size_t k_j_2_max__ = N_comp;
                size_t k_j_1_max__ = N_comp;
                for (size_t j_2__ = 0; j_2__ < k_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < k_j_1_max__; ++j_1__) {
                        vars__.push_back(k(j_1__, j_2__));
                    }
                }
                size_t E_j_2_max__ = N_comp;
                size_t E_j_1_max__ = N_comp;
                for (size_t j_2__ = 0; j_2__ < E_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < E_j_1_max__; ++j_1__) {
                        vars__.push_back(E(j_1__, j_2__));
                    }
                }
                size_t I_j_2_max__ = N_comp;
                size_t I_j_1_max__ = N_comp;
                for (size_t j_2__ = 0; j_2__ < I_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < I_j_1_max__; ++j_1__) {
                        vars__.push_back(I(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 138;
            validate_non_negative_index("val_pred_comp", "N_obs_comp", N_obs_comp);
            validate_non_negative_index("val_pred_comp", "N_comp", N_comp);
            std::vector<std::vector<double> > val_pred_comp(N_obs_comp, std::vector<double>(N_comp, double(0)));
            stan::math::initialize(val_pred_comp, DUMMY_VAR__);
            stan::math::fill(val_pred_comp, DUMMY_VAR__);
            current_statement_begin__ = 139;
            validate_non_negative_index("log_lik", "N_obs_comp", N_obs_comp);
            validate_non_negative_index("log_lik", "N_rep", N_rep);
            validate_non_negative_index("log_lik", "N_comp", N_comp);
            std::vector<std::vector<std::vector<double> > > log_lik(N_obs_comp, std::vector<std::vector<double> >(N_rep, std::vector<double>(N_comp, double(0))));
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 141;
            for (int i_comp = 1; i_comp <= N_comp; ++i_comp) {
                current_statement_begin__ = 142;
                for (int t = 1; t <= N_obs_comp; ++t) {
                    current_statement_begin__ = 143;
                    stan::model::assign(val_pred_comp, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(i_comp), stan::model::nil_index_list())), 
                                normal_rng(get_base1(Cpred_comp, t, i_comp, "Cpred_comp", 1), get_base1(sigma, i_comp, "sigma", 1), base_rng__), 
                                "assigning variable val_pred_comp");
                }
            }
            current_statement_begin__ = 147;
            for (int i_rep = 1; i_rep <= N_rep; ++i_rep) {
                current_statement_begin__ = 148;
                for (int i = 1; i <= N_obs_comp; ++i) {
                    current_statement_begin__ = 149;
                    for (int i_comp = 1; i_comp <= N_comp; ++i_comp) {
                        current_statement_begin__ = 150;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i_rep), stan::model::cons_list(stan::model::index_uni(i_comp), stan::model::nil_index_list()))), 
                                    normal_log(get_base1(get_base1(get_base1(val_obs_comp, i, "val_obs_comp", 1), i_rep, "val_obs_comp", 2), i_comp, "val_obs_comp", 3), get_base1(Cpred_comp, i, i_comp, "Cpred_comp", 1), get_base1(sigma, i_comp, "sigma", 1)), 
                                    "assigning variable log_lik");
                    }
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 138;
            size_t val_pred_comp_k_0_max__ = N_obs_comp;
            size_t val_pred_comp_k_1_max__ = N_comp;
            for (size_t k_1__ = 0; k_1__ < val_pred_comp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < val_pred_comp_k_0_max__; ++k_0__) {
                    vars__.push_back(val_pred_comp[k_0__][k_1__]);
                }
            }
            current_statement_begin__ = 139;
            size_t log_lik_k_0_max__ = N_obs_comp;
            size_t log_lik_k_1_max__ = N_rep;
            size_t log_lik_k_2_max__ = N_comp;
            for (size_t k_2__ = 0; k_2__ < log_lik_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < log_lik_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                        vars__.push_back(log_lik[k_0__][k_1__][k_2__]);
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_PBK_AD";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t log10ku_k_0_max__ = N_comp;
        for (size_t k_0__ = 0; k_0__ < log10ku_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log10ku" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log10ke_k_0_max__ = N_comp;
        for (size_t k_0__ = 0; k_0__ < log10ke_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log10ke" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log10k_k_0_max__ = N_comp;
        size_t log10k_k_1_max__ = N_comp;
        for (size_t k_1__ = 0; k_1__ < log10k_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < log10k_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log10k" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_k_0_max__ = N_comp;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Cpred_comp_j_2_max__ = N_comp;
            size_t Cpred_comp_j_1_max__ = N_obs_comp;
            for (size_t j_2__ = 0; j_2__ < Cpred_comp_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Cpred_comp_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Cpred_comp" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t ku_j_1_max__ = N_comp;
            for (size_t j_1__ = 0; j_1__ < ku_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ku" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t ke_j_1_max__ = N_comp;
            for (size_t j_1__ = 0; j_1__ < ke_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ke" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t k_j_2_max__ = N_comp;
            size_t k_j_1_max__ = N_comp;
            for (size_t j_2__ = 0; j_2__ < k_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < k_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "k" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t E_j_2_max__ = N_comp;
            size_t E_j_1_max__ = N_comp;
            for (size_t j_2__ = 0; j_2__ < E_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < E_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "E" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t I_j_2_max__ = N_comp;
            size_t I_j_1_max__ = N_comp;
            for (size_t j_2__ = 0; j_2__ < I_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < I_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "I" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t val_pred_comp_k_0_max__ = N_obs_comp;
        size_t val_pred_comp_k_1_max__ = N_comp;
        for (size_t k_1__ = 0; k_1__ < val_pred_comp_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < val_pred_comp_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "val_pred_comp" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_k_0_max__ = N_obs_comp;
        size_t log_lik_k_1_max__ = N_rep;
        size_t log_lik_k_2_max__ = N_comp;
        for (size_t k_2__ = 0; k_2__ < log_lik_k_2_max__; ++k_2__) {
            for (size_t k_1__ = 0; k_1__ < log_lik_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "log_lik" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t log10ku_k_0_max__ = N_comp;
        for (size_t k_0__ = 0; k_0__ < log10ku_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log10ku" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log10ke_k_0_max__ = N_comp;
        for (size_t k_0__ = 0; k_0__ < log10ke_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log10ke" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log10k_k_0_max__ = N_comp;
        size_t log10k_k_1_max__ = N_comp;
        for (size_t k_1__ = 0; k_1__ < log10k_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < log10k_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log10k" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_k_0_max__ = N_comp;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Cpred_comp_j_2_max__ = N_comp;
            size_t Cpred_comp_j_1_max__ = N_obs_comp;
            for (size_t j_2__ = 0; j_2__ < Cpred_comp_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Cpred_comp_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Cpred_comp" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t ku_j_1_max__ = N_comp;
            for (size_t j_1__ = 0; j_1__ < ku_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ku" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t ke_j_1_max__ = N_comp;
            for (size_t j_1__ = 0; j_1__ < ke_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ke" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t k_j_2_max__ = N_comp;
            size_t k_j_1_max__ = N_comp;
            for (size_t j_2__ = 0; j_2__ < k_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < k_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "k" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t E_j_2_max__ = N_comp;
            size_t E_j_1_max__ = N_comp;
            for (size_t j_2__ = 0; j_2__ < E_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < E_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "E" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t I_j_2_max__ = N_comp;
            size_t I_j_1_max__ = N_comp;
            for (size_t j_2__ = 0; j_2__ < I_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < I_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "I" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t val_pred_comp_k_0_max__ = N_obs_comp;
        size_t val_pred_comp_k_1_max__ = N_comp;
        for (size_t k_1__ = 0; k_1__ < val_pred_comp_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < val_pred_comp_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "val_pred_comp" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_k_0_max__ = N_obs_comp;
        size_t log_lik_k_1_max__ = N_rep;
        size_t log_lik_k_2_max__ = N_comp;
        for (size_t k_2__ = 0; k_2__ < log_lik_k_2_max__; ++k_2__) {
            for (size_t k_1__ = 0; k_1__ < log_lik_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "log_lik" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }
}; // model
}  // namespace
typedef model_PBK_AD_namespace::model_PBK_AD stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
