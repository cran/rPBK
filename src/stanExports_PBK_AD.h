// Generated by rstantools.  Do not edit by hand.

/*
    rPBK is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rPBK is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rPBK.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_PBK_AD_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 138> locations_array__ =
  {" (found before start of program)",
  " (in 'PBK_AD', line 68, column 2 to column 29)",
  " (in 'PBK_AD', line 69, column 2 to column 29)",
  " (in 'PBK_AD', line 70, column 2 to column 35)",
  " (in 'PBK_AD', line 71, column 2 to column 36)",
  " (in 'PBK_AD', line 74, column 2 to column 40)",
  " (in 'PBK_AD', line 75, column 2 to column 21)",
  " (in 'PBK_AD', line 76, column 2 to column 21)",
  " (in 'PBK_AD', line 77, column 2 to column 28)",
  " (in 'PBK_AD', line 78, column 2 to column 28)",
  " (in 'PBK_AD', line 79, column 2 to column 28)",
  " (in 'PBK_AD', line 117, column 2 to column 47)",
  " (in 'PBK_AD', line 118, column 2 to column 48)",
  " (in 'PBK_AD', line 81, column 4 to column 50)",
  " (in 'PBK_AD', line 82, column 4 to column 50)",
  " (in 'PBK_AD', line 84, column 6 to column 55)",
  " (in 'PBK_AD', line 83, column 22 to line 85, column 5)",
  " (in 'PBK_AD', line 83, column 4 to line 85, column 5)",
  " (in 'PBK_AD', line 80, column 20 to line 86, column 3)",
  " (in 'PBK_AD', line 80, column 2 to line 86, column 3)",
  " (in 'PBK_AD', line 87, column 2 to column 28)",
  " (in 'PBK_AD', line 88, column 2 to column 23)",
  " (in 'PBK_AD', line 89, column 2 to line 98, column 7)",
  " (in 'PBK_AD', line 121, column 6 to column 83)",
  " (in 'PBK_AD', line 120, column 26 to line 122, column 5)",
  " (in 'PBK_AD', line 120, column 4 to line 122, column 5)",
  " (in 'PBK_AD', line 119, column 25 to line 123, column 3)",
  " (in 'PBK_AD', line 119, column 2 to line 123, column 3)",
  " (in 'PBK_AD', line 128, column 8 to column 114)",
  " (in 'PBK_AD', line 127, column 29 to line 129, column 7)",
  " (in 'PBK_AD', line 127, column 6 to line 129, column 7)",
  " (in 'PBK_AD', line 126, column 26 to line 130, column 5)",
  " (in 'PBK_AD', line 126, column 4 to line 130, column 5)",
  " (in 'PBK_AD', line 125, column 23 to line 131, column 3)",
  " (in 'PBK_AD', line 125, column 2 to line 131, column 3)",
  " (in 'PBK_AD', line 101, column 2 to column 42)",
  " (in 'PBK_AD', line 102, column 2 to column 42)",
  " (in 'PBK_AD', line 104, column 4 to column 61)",
  " (in 'PBK_AD', line 103, column 25 to line 105, column 3)",
  " (in 'PBK_AD', line 103, column 2 to line 105, column 3)",
  " (in 'PBK_AD', line 106, column 2 to column 42)",
  " (in 'PBK_AD', line 110, column 8 to column 98)",
  " (in 'PBK_AD', line 109, column 29 to line 111, column 7)",
  " (in 'PBK_AD', line 109, column 6 to line 111, column 7)",
  " (in 'PBK_AD', line 108, column 26 to line 112, column 5)",
  " (in 'PBK_AD', line 108, column 4 to line 112, column 5)",
  " (in 'PBK_AD', line 107, column 23 to line 113, column 3)",
  " (in 'PBK_AD', line 107, column 2 to line 113, column 3)",
  " (in 'PBK_AD', line 55, column 2 to column 26)",
  " (in 'PBK_AD', line 56, column 2 to column 21)",
  " (in 'PBK_AD', line 57, column 2 to column 22)",
  " (in 'PBK_AD', line 58, column 9 to column 19)",
  " (in 'PBK_AD', line 58, column 2 to column 35)",
  " (in 'PBK_AD', line 59, column 9 to column 15)",
  " (in 'PBK_AD', line 59, column 2 to column 25)",
  " (in 'PBK_AD', line 60, column 9 to column 15)",
  " (in 'PBK_AD', line 60, column 2 to column 25)",
  " (in 'PBK_AD', line 61, column 9 to column 15)",
  " (in 'PBK_AD', line 61, column 16 to column 22)",
  " (in 'PBK_AD', line 61, column 2 to column 31)",
  " (in 'PBK_AD', line 62, column 8 to column 18)",
  " (in 'PBK_AD', line 62, column 19 to column 24)",
  " (in 'PBK_AD', line 62, column 25 to column 31)",
  " (in 'PBK_AD', line 62, column 2 to column 51)",
  " (in 'PBK_AD', line 63, column 2 to column 10)",
  " (in 'PBK_AD', line 64, column 2 to column 12)",
  " (in 'PBK_AD', line 65, column 2 to column 19)",
  " (in 'PBK_AD', line 68, column 8 to column 14)",
  " (in 'PBK_AD', line 69, column 8 to column 14)",
  " (in 'PBK_AD', line 70, column 8 to column 14)",
  " (in 'PBK_AD', line 70, column 15 to column 21)",
  " (in 'PBK_AD', line 71, column 8 to column 14)",
  " (in 'PBK_AD', line 74, column 9 to column 19)",
  " (in 'PBK_AD', line 74, column 21 to column 27)",
  " (in 'PBK_AD', line 75, column 9 to column 15)",
  " (in 'PBK_AD', line 76, column 9 to column 15)",
  " (in 'PBK_AD', line 77, column 9 to column 15)",
  " (in 'PBK_AD', line 77, column 17 to column 23)",
  " (in 'PBK_AD', line 78, column 9 to column 15)",
  " (in 'PBK_AD', line 78, column 17 to column 23)",
  " (in 'PBK_AD', line 79, column 9 to column 15)",
  " (in 'PBK_AD', line 79, column 17 to column 23)",
  " (in 'PBK_AD', line 117, column 8 to column 18)",
  " (in 'PBK_AD', line 117, column 20 to column 26)",
  " (in 'PBK_AD', line 118, column 8 to column 18)",
  " (in 'PBK_AD', line 118, column 20 to column 25)",
  " (in 'PBK_AD', line 118, column 27 to column 33)",
  " (in 'PBK_AD', line 4, column 2 to column 13)",
  " (in 'PBK_AD', line 12, column 6 to column 15)",
  " (in 'PBK_AD', line 11, column 24 to line 13, column 5)",
  " (in 'PBK_AD', line 11, column 4 to line 13, column 5)",
  " (in 'PBK_AD', line 14, column 4 to column 14)",
  " (in 'PBK_AD', line 10, column 9 to line 15, column 3)",
  " (in 'PBK_AD', line 9, column 4 to column 14)",
  " (in 'PBK_AD', line 8, column 39 to line 10, column 3)",
  " (in 'PBK_AD', line 8, column 9 to line 15, column 3)",
  " (in 'PBK_AD', line 6, column 4 to column 30)",
  " (in 'PBK_AD', line 7, column 4 to column 14)",
  " (in 'PBK_AD', line 5, column 18 to line 8, column 3)",
  " (in 'PBK_AD', line 5, column 2 to line 15, column 3)",
  " (in 'PBK_AD', line 3, column 33 to line 16, column 1)",
  " (in 'PBK_AD', line 23, column 4 to column 16)",
  " (in 'PBK_AD', line 22, column 8 to line 24, column 3)",
  " (in 'PBK_AD', line 20, column 4 to column 33)",
  " (in 'PBK_AD', line 21, column 4 to column 90)",
  " (in 'PBK_AD', line 19, column 36 to line 22, column 3)",
  " (in 'PBK_AD', line 19, column 2 to line 24, column 3)",
  " (in 'PBK_AD', line 18, column 48 to line 25, column 1)",
  " (in 'PBK_AD', line 28, column 9 to column 15)",
  " (in 'PBK_AD', line 28, column 16 to column 22)",
  " (in 'PBK_AD', line 28, column 2 to column 44)",
  " (in 'PBK_AD', line 29, column 9 to column 15)",
  " (in 'PBK_AD', line 29, column 16 to column 22)",
  " (in 'PBK_AD', line 29, column 2 to column 31)",
  " (in 'PBK_AD', line 34, column 6 to column 105)",
  " (in 'PBK_AD', line 33, column 11 to line 35, column 5)",
  " (in 'PBK_AD', line 32, column 6 to column 74)",
  " (in 'PBK_AD', line 31, column 22 to line 33, column 5)",
  " (in 'PBK_AD', line 31, column 4 to line 35, column 5)",
  " (in 'PBK_AD', line 30, column 20 to line 36, column 3)",
  " (in 'PBK_AD', line 30, column 2 to line 36, column 3)",
  " (in 'PBK_AD', line 37, column 2 to column 20)",
  " (in 'PBK_AD', line 27, column 107 to line 38, column 1)",
  " (in 'PBK_AD', line 42, column 9 to column 12)",
  " (in 'PBK_AD', line 42, column 14 to column 17)",
  " (in 'PBK_AD', line 42, column 2 to column 55)",
  " (in 'PBK_AD', line 43, column 9 to column 12)",
  " (in 'PBK_AD', line 43, column 2 to column 53)",
  " (in 'PBK_AD', line 44, column 9 to column 12)",
  " (in 'PBK_AD', line 44, column 14 to column 17)",
  " (in 'PBK_AD', line 44, column 2 to column 55)",
  " (in 'PBK_AD', line 46, column 2 to column 24)",
  " (in 'PBK_AD', line 40, column 45 to line 47, column 1)",
  " (in 'PBK_AD', line 50, column 9 to column 10)",
  " (in 'PBK_AD', line 50, column 11 to column 12)",
  " (in 'PBK_AD', line 50, column 2 to column 52)",
  " (in 'PBK_AD', line 51, column 2 to column 12)",
  " (in 'PBK_AD', line 49, column 22 to line 52, column 1)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
int findfirst(const T0__& t, const T1__& xt_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>>
interpolate(const T0__& x, const T1__& xpt_arg__, const T2__& ypt_arg__,
            std::ostream* pstream__);
template <typename T0__, typename T2__, typename T3__, typename T4__,
          typename T5__, typename T7__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::promote_args_t<T7__>>,-1,-1>
exact_AD_long(const T0__& time_arg__, const int& N_time, const T2__& tacc,
              const T3__& E_arg__, const T4__& I_arg__, const T5__& U_arg__,
              const int& N_comp, const T7__& Cx, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
matrix_E(const T0__& ke_arg__, const T1__& k_arg__, const int& N_k,
         std::ostream* pstream__);
Eigen::Matrix<double,-1,-1> matrix_I(const int& k, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
int findfirst(const T0__& t, const T1__& xt_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& xt = stan::math::to_ref(xt_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int i = std::numeric_limits<int>::min();
    current_statement__ = 87;
    i = 0;
    current_statement__ = 99;
    if (stan::math::logical_eq(t, stan::math::max(xt))) {
      current_statement__ = 96;
      i = (stan::math::num_elements(xt) - 1);
      current_statement__ = 97;
      return i;
    } else {
      current_statement__ = 95;
      if ((stan::math::primitive_value(
             stan::math::logical_lt(t, stan::math::min(xt)))
          ||
          stan::math::primitive_value(
            stan::math::logical_gt(t, stan::math::max(xt))))) {
        current_statement__ = 93;
        return i;
      } else {
        current_statement__ = 90;
        while (stan::math::logical_gte(t,
                 stan::model::rvalue(xt, "xt",
                   stan::model::index_uni((i + 1))))) {
          current_statement__ = 88;
          i = (i + 1);
        }
        current_statement__ = 91;
        return i;
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>>
interpolate(const T0__& x, const T1__& xpt_arg__, const T2__& ypt_arg__,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& xpt = stan::math::to_ref(xpt_arg__);
  const auto& ypt = stan::math::to_ref(ypt_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 106;
    if ((stan::math::primitive_value(
           stan::math::logical_gte(x, stan::math::min(xpt)))
        &&
        stan::math::primitive_value(
          stan::math::logical_lte(x, stan::math::max(xpt))))) {
      int idx = std::numeric_limits<int>::min();
      current_statement__ = 103;
      idx = findfirst(x, xpt, pstream__);
      current_statement__ = 104;
      return (stan::model::rvalue(ypt, "ypt", stan::model::index_uni(idx)) +
             (((x -
             stan::model::rvalue(xpt, "xpt", stan::model::index_uni(idx))) *
             (stan::model::rvalue(ypt, "ypt",
                stan::model::index_uni((idx + 1)))
             - stan::model::rvalue(ypt, "ypt", stan::model::index_uni(idx))))
             /
             (stan::model::rvalue(xpt, "xpt",
                stan::model::index_uni((idx + 1)))
             -
             stan::model::rvalue(xpt, "xpt", stan::model::index_uni(idx)))));
    } else {
      current_statement__ = 101;
      return 0.0;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__, typename T3__, typename T4__,
          typename T5__, typename T7__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T7__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::promote_args_t<T7__>>,-1,-1>
exact_AD_long(const T0__& time_arg__, const int& N_time, const T2__& tacc,
              const T3__& E_arg__, const T4__& I_arg__, const T5__& U_arg__,
              const int& N_comp, const T7__& Cx, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T2__, stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::promote_args_t<T7__>>;
  int current_statement__ = 0;
  const auto& time = stan::math::to_ref(time_arg__);
  const auto& E = stan::math::to_ref(E_arg__);
  const auto& I = stan::math::to_ref(I_arg__);
  const auto& U = stan::math::to_ref(U_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 108;
    stan::math::validate_non_negative_index("E_inv", "N_comp", N_comp);
    current_statement__ = 109;
    stan::math::validate_non_negative_index("E_inv", "N_comp", N_comp);
    Eigen::Matrix<local_scalar_t__,-1,-1> E_inv =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_comp, N_comp,
        DUMMY_VAR__);
    current_statement__ = 110;
    stan::model::assign(E_inv, stan::math::inverse(E),
      "assigning variable E_inv");
    current_statement__ = 111;
    stan::math::validate_non_negative_index("E_out", "N_comp", N_comp);
    current_statement__ = 112;
    stan::math::validate_non_negative_index("E_out", "N_time", N_time);
    Eigen::Matrix<local_scalar_t__,-1,-1> E_out =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_comp, N_time,
        DUMMY_VAR__);
    current_statement__ = 120;
    for (int i = 1; i <= N_time; ++i) {
      current_statement__ = 118;
      if (stan::math::logical_lt(
            stan::model::rvalue(time, "time", stan::model::index_uni(i)),
            tacc)) {
        current_statement__ = 116;
        stan::model::assign(E_out,
          stan::math::multiply(
            stan::math::multiply(
              stan::math::multiply(E_inv,
                stan::math::subtract(
                  stan::math::matrix_exp(
                    stan::math::multiply(
                      stan::model::rvalue(time, "time",
                        stan::model::index_uni(i)), E)), I)), U), Cx),
          "assigning variable E_out", stan::model::index_min_max(1, N_comp),
          stan::model::index_uni(i));
      } else {
        current_statement__ = 114;
        stan::model::assign(E_out,
          stan::math::multiply(
            stan::math::multiply(
              stan::math::multiply(E_inv,
                stan::math::subtract(
                  stan::math::matrix_exp(
                    stan::math::multiply(
                      stan::model::rvalue(time, "time",
                        stan::model::index_uni(i)), E)),
                  stan::math::matrix_exp(
                    stan::math::multiply(
                      (stan::model::rvalue(time, "time",
                         stan::model::index_uni(i)) - tacc), E)))), U), Cx),
          "assigning variable E_out", stan::model::index_min_max(1, N_comp),
          stan::model::index_uni(i));
      }
    }
    current_statement__ = 121;
    return stan::math::transpose(E_out);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
matrix_E(const T0__& ke_arg__, const T1__& k_arg__, const int& N_k,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& ke = stan::math::to_ref(ke_arg__);
  const auto& k = stan::math::to_ref(k_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 123;
    stan::math::validate_non_negative_index("m", "N_k", N_k);
    current_statement__ = 124;
    stan::math::validate_non_negative_index("m", "N_k", N_k);
    Eigen::Matrix<local_scalar_t__,-1,-1> m =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_k, N_k, DUMMY_VAR__);
    current_statement__ = 125;
    stan::model::assign(m,
      stan::math::add_diag(k, stan::math::rep_vector(0, N_k)),
      "assigning variable m");
    current_statement__ = 126;
    stan::math::validate_non_negative_index("diag_k", "N_k", N_k);
    Eigen::Matrix<local_scalar_t__,-1,1> diag_k =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_k, DUMMY_VAR__);
    current_statement__ = 127;
    stan::model::assign(diag_k,
      stan::math::subtract(stan::math::minus(ke),
        stan::math::multiply(m, stan::math::rep_vector(1, N_k))),
      "assigning variable diag_k");
    current_statement__ = 128;
    stan::math::validate_non_negative_index("matrix_E_rtn", "N_k", N_k);
    current_statement__ = 129;
    stan::math::validate_non_negative_index("matrix_E_rtn", "N_k", N_k);
    Eigen::Matrix<local_scalar_t__,-1,-1> matrix_E_rtn =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_k, N_k, DUMMY_VAR__);
    current_statement__ = 130;
    stan::model::assign(matrix_E_rtn, stan::math::add_diag(k, diag_k),
      "assigning variable matrix_E_rtn");
    current_statement__ = 131;
    return matrix_E_rtn;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,-1> matrix_I(const int& k, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 133;
    stan::math::validate_non_negative_index("I", "k", k);
    current_statement__ = 134;
    stan::math::validate_non_negative_index("I", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,-1> I =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(k, k, DUMMY_VAR__);
    current_statement__ = 135;
    stan::model::assign(I,
      stan::math::add_diag(stan::math::rep_matrix(0, k, k), 1),
      "assigning variable I");
    current_statement__ = 136;
    return I;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_PBK_AD final : public model_base_crtp<model_PBK_AD> {
private:
  int N_obs_comp;
  int N_rep;
  int N_comp;
  Eigen::Matrix<double,-1,1> time_obs_comp_data__;
  Eigen::Matrix<double,-1,1> ke_nest_data__;
  Eigen::Matrix<double,-1,1> ku_nest_data__;
  Eigen::Matrix<double,-1,-1> k_nest_data__;
  std::vector<std::vector<std::vector<double>>> val_obs_comp;
  double t0;
  double tacc;
  double val_obs_exp;
  Eigen::Map<Eigen::Matrix<double,-1,1>> time_obs_comp{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ke_nest{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ku_nest{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> k_nest{nullptr, 0, 0};
public:
  ~model_PBK_AD() {}
  model_PBK_AD(stan::io::var_context& context__, unsigned int
               random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_PBK_AD_namespace::model_PBK_AD";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 48;
      context__.validate_dims("data initialization", "N_obs_comp", "int",
        std::vector<size_t>{});
      N_obs_comp = std::numeric_limits<int>::min();
      current_statement__ = 48;
      N_obs_comp = context__.vals_i("N_obs_comp")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "N_obs_comp",
        N_obs_comp, 0);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "N_rep", "int",
        std::vector<size_t>{});
      N_rep = std::numeric_limits<int>::min();
      current_statement__ = 49;
      N_rep = context__.vals_i("N_rep")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "N_rep", N_rep, 0);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "N_comp", "int",
        std::vector<size_t>{});
      N_comp = std::numeric_limits<int>::min();
      current_statement__ = 50;
      N_comp = context__.vals_i("N_comp")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "N_comp", N_comp, 0);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("time_obs_comp", "N_obs_comp",
        N_obs_comp);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "time_obs_comp",
        "double", std::vector<size_t>{static_cast<size_t>(N_obs_comp)});
      time_obs_comp_data__ = Eigen::Matrix<double,-1,1>::Constant(N_obs_comp,
                               std::numeric_limits<double>::quiet_NaN());
      new (&time_obs_comp)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(time_obs_comp_data__.data(),
        N_obs_comp);
      {
        std::vector<local_scalar_t__> time_obs_comp_flat__;
        current_statement__ = 52;
        time_obs_comp_flat__ = context__.vals_r("time_obs_comp");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= N_obs_comp; ++sym1__) {
          current_statement__ = 52;
          stan::model::assign(time_obs_comp, time_obs_comp_flat__[(pos__ -
            1)], "assigning variable time_obs_comp",
            stan::model::index_uni(sym1__));
          current_statement__ = 52;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 53;
      stan::math::validate_non_negative_index("ke_nest", "N_comp", N_comp);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "ke_nest", "double",
        std::vector<size_t>{static_cast<size_t>(N_comp)});
      ke_nest_data__ = Eigen::Matrix<double,-1,1>::Constant(N_comp,
                         std::numeric_limits<double>::quiet_NaN());
      new (&ke_nest)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ke_nest_data__.data(), N_comp);
      {
        std::vector<local_scalar_t__> ke_nest_flat__;
        current_statement__ = 54;
        ke_nest_flat__ = context__.vals_r("ke_nest");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
          current_statement__ = 54;
          stan::model::assign(ke_nest, ke_nest_flat__[(pos__ - 1)],
            "assigning variable ke_nest", stan::model::index_uni(sym1__));
          current_statement__ = 54;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 55;
      stan::math::validate_non_negative_index("ku_nest", "N_comp", N_comp);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "ku_nest", "double",
        std::vector<size_t>{static_cast<size_t>(N_comp)});
      ku_nest_data__ = Eigen::Matrix<double,-1,1>::Constant(N_comp,
                         std::numeric_limits<double>::quiet_NaN());
      new (&ku_nest)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ku_nest_data__.data(), N_comp);
      {
        std::vector<local_scalar_t__> ku_nest_flat__;
        current_statement__ = 56;
        ku_nest_flat__ = context__.vals_r("ku_nest");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
          current_statement__ = 56;
          stan::model::assign(ku_nest, ku_nest_flat__[(pos__ - 1)],
            "assigning variable ku_nest", stan::model::index_uni(sym1__));
          current_statement__ = 56;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 57;
      stan::math::validate_non_negative_index("k_nest", "N_comp", N_comp);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("k_nest", "N_comp", N_comp);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "k_nest", "double",
        std::vector<size_t>{static_cast<size_t>(N_comp),
          static_cast<size_t>(N_comp)});
      k_nest_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_comp, N_comp,
                        std::numeric_limits<double>::quiet_NaN());
      new (&k_nest)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(k_nest_data__.data(), N_comp,
        N_comp);
      {
        std::vector<local_scalar_t__> k_nest_flat__;
        current_statement__ = 59;
        k_nest_flat__ = context__.vals_r("k_nest");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
          current_statement__ = 59;
          for (int sym2__ = 1; sym2__ <= N_comp; ++sym2__) {
            current_statement__ = 59;
            stan::model::assign(k_nest, k_nest_flat__[(pos__ - 1)],
              "assigning variable k_nest", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 59;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 60;
      stan::math::validate_non_negative_index("val_obs_comp", "N_obs_comp",
        N_obs_comp);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("val_obs_comp", "N_rep", N_rep);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("val_obs_comp", "N_comp",
        N_comp);
      current_statement__ = 63;
      context__.validate_dims("data initialization", "val_obs_comp",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_obs_comp),
          static_cast<size_t>(N_rep), static_cast<size_t>(N_comp)});
      val_obs_comp = std::vector<std::vector<std::vector<double>>>(N_obs_comp,
                       std::vector<std::vector<double>>(N_rep,
                         std::vector<double>(N_comp,
                           std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> val_obs_comp_flat__;
        current_statement__ = 63;
        val_obs_comp_flat__ = context__.vals_r("val_obs_comp");
        current_statement__ = 63;
        pos__ = 1;
        current_statement__ = 63;
        for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
          current_statement__ = 63;
          for (int sym2__ = 1; sym2__ <= N_rep; ++sym2__) {
            current_statement__ = 63;
            for (int sym3__ = 1; sym3__ <= N_obs_comp; ++sym3__) {
              current_statement__ = 63;
              stan::model::assign(val_obs_comp, val_obs_comp_flat__[(pos__ -
                1)], "assigning variable val_obs_comp",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 63;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 64;
      context__.validate_dims("data initialization", "t0", "double",
        std::vector<size_t>{});
      t0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 64;
      t0 = context__.vals_r("t0")[(1 - 1)];
      current_statement__ = 65;
      context__.validate_dims("data initialization", "tacc", "double",
        std::vector<size_t>{});
      tacc = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 65;
      tacc = context__.vals_r("tacc")[(1 - 1)];
      current_statement__ = 66;
      context__.validate_dims("data initialization", "val_obs_exp", "double",
        std::vector<size_t>{});
      val_obs_exp = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 66;
      val_obs_exp = context__.vals_r("val_obs_exp")[(1 - 1)];
      current_statement__ = 67;
      stan::math::validate_non_negative_index("log10ku", "N_comp", N_comp);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("log10ke", "N_comp", N_comp);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("log10k", "N_comp", N_comp);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("log10k", "N_comp", N_comp);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("sigma", "N_comp", N_comp);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("Cpred_comp", "N_obs_comp",
        N_obs_comp);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("Cpred_comp", "N_comp", N_comp);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("ku", "N_comp", N_comp);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("ke", "N_comp", N_comp);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("k", "N_comp", N_comp);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("k", "N_comp", N_comp);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("E", "N_comp", N_comp);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("E", "N_comp", N_comp);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("I", "N_comp", N_comp);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("I", "N_comp", N_comp);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("val_pred_comp", "N_obs_comp",
        N_obs_comp);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("val_pred_comp", "N_comp",
        N_comp);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("log_lik", "N_obs_comp",
        N_obs_comp);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("log_lik", "N_rep", N_rep);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("log_lik", "N_comp", N_comp);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N_comp + N_comp + (N_comp * N_comp) + N_comp;
  }
  inline std::string model_name() const final {
    return "model_PBK_AD";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_PBK_AD_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> log10ku =
        std::vector<local_scalar_t__>(N_comp, DUMMY_VAR__);
      current_statement__ = 1;
      log10ku = in__.template read<std::vector<local_scalar_t__>>(N_comp);
      std::vector<local_scalar_t__> log10ke =
        std::vector<local_scalar_t__>(N_comp, DUMMY_VAR__);
      current_statement__ = 2;
      log10ke = in__.template read<std::vector<local_scalar_t__>>(N_comp);
      std::vector<std::vector<local_scalar_t__>> log10k =
        std::vector<std::vector<local_scalar_t__>>(N_comp,
          std::vector<local_scalar_t__>(N_comp, DUMMY_VAR__));
      current_statement__ = 3;
      log10k = in__.template read<
                 std::vector<std::vector<local_scalar_t__>>>(N_comp, N_comp);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(N_comp, DUMMY_VAR__);
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, N_comp);
      Eigen::Matrix<local_scalar_t__,-1,-1> Cpred_comp =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_obs_comp, N_comp,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> ku =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_comp, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> ke =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_comp, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> k =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_comp, N_comp,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> E =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_comp, N_comp,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> I =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_comp, N_comp,
          DUMMY_VAR__);
      current_statement__ = 19;
      for (int i = 1; i <= N_comp; ++i) {
        current_statement__ = 13;
        stan::model::assign(ku,
          (stan::math::logical_eq(
             stan::model::rvalue(ku_nest, "ku_nest",
               stan::model::index_uni(i)), 0) ? 0 : stan::math::pow(10,
                                                      stan::model::rvalue(
                                                        log10ku, "log10ku",
                                                        stan::model::index_uni(
                                                          i)))),
          "assigning variable ku", stan::model::index_uni(i));
        current_statement__ = 14;
        stan::model::assign(ke,
          (stan::math::logical_eq(
             stan::model::rvalue(ke_nest, "ke_nest",
               stan::model::index_uni(i)), 0) ? 0 : stan::math::pow(10,
                                                      stan::model::rvalue(
                                                        log10ke, "log10ke",
                                                        stan::model::index_uni(
                                                          i)))),
          "assigning variable ke", stan::model::index_uni(i));
        current_statement__ = 17;
        for (int j = 1; j <= N_comp; ++j) {
          current_statement__ = 15;
          stan::model::assign(k,
            (stan::math::logical_eq(
               stan::model::rvalue(k_nest, "k_nest",
                 stan::model::index_uni(i), stan::model::index_uni(j)), 0) ? 0 : 
            stan::math::pow(10,
              stan::model::rvalue(log10k, "log10k",
                stan::model::index_uni(i), stan::model::index_uni(j)))),
            "assigning variable k", stan::model::index_uni(i),
            stan::model::index_uni(j));
        }
      }
      current_statement__ = 20;
      stan::model::assign(E, matrix_E(ke, k, N_comp, pstream__),
        "assigning variable E");
      current_statement__ = 21;
      stan::model::assign(I, matrix_I(N_comp, pstream__),
        "assigning variable I");
      current_statement__ = 22;
      stan::model::assign(Cpred_comp,
        exact_AD_long(time_obs_comp, N_obs_comp, tacc, E, I, ku, N_comp,
          val_obs_exp, pstream__), "assigning variable Cpred_comp");
      {
        current_statement__ = 35;
        lp_accum__.add(stan::math::uniform_lpdf<false>(log10ku, -5, 5));
        current_statement__ = 36;
        lp_accum__.add(stan::math::uniform_lpdf<false>(log10ke, -5, 5));
        current_statement__ = 39;
        for (int i_comp = 1; i_comp <= N_comp; ++i_comp) {
          current_statement__ = 37;
          lp_accum__.add(stan::math::uniform_lpdf<false>(
                           stan::model::rvalue(log10k, "log10k",
                             stan::model::index_min_max(1, N_comp),
                             stan::model::index_uni(i_comp)), -5, 5));
        }
        current_statement__ = 40;
        lp_accum__.add(stan::math::gamma_lpdf<false>(sigma, 0.01, 0.01));
        current_statement__ = 47;
        for (int i_rep = 1; i_rep <= N_rep; ++i_rep) {
          current_statement__ = 45;
          for (int i = 1; i <= N_obs_comp; ++i) {
            current_statement__ = 43;
            for (int i_comp = 1; i_comp <= N_comp; ++i_comp) {
              current_statement__ = 41;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(val_obs_comp,
                                 "val_obs_comp", stan::model::index_uni(i),
                                 stan::model::index_uni(i_rep),
                                 stan::model::index_uni(i_comp)),
                               stan::model::rvalue(Cpred_comp, "Cpred_comp",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(i_comp)),
                               stan::model::rvalue(sigma, "sigma",
                                 stan::model::index_uni(i_comp))));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_PBK_AD_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> log10ku =
        std::vector<double>(N_comp, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      log10ku = in__.template read<std::vector<local_scalar_t__>>(N_comp);
      std::vector<double> log10ke =
        std::vector<double>(N_comp, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      log10ke = in__.template read<std::vector<local_scalar_t__>>(N_comp);
      std::vector<std::vector<double>> log10k =
        std::vector<std::vector<double>>(N_comp,
          std::vector<double>(N_comp,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 3;
      log10k = in__.template read<
                 std::vector<std::vector<local_scalar_t__>>>(N_comp, N_comp);
      std::vector<double> sigma =
        std::vector<double>(N_comp, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, N_comp);
      Eigen::Matrix<double,-1,-1> Cpred_comp =
        Eigen::Matrix<double,-1,-1>::Constant(N_obs_comp, N_comp,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> ku =
        Eigen::Matrix<double,-1,1>::Constant(N_comp,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> ke =
        Eigen::Matrix<double,-1,1>::Constant(N_comp,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> k =
        Eigen::Matrix<double,-1,-1>::Constant(N_comp, N_comp,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> E =
        Eigen::Matrix<double,-1,-1>::Constant(N_comp, N_comp,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> I =
        Eigen::Matrix<double,-1,-1>::Constant(N_comp, N_comp,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(log10ku);
      out__.write(log10ke);
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_comp; ++sym2__) {
          out__.write(log10k[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(sigma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 19;
      for (int i = 1; i <= N_comp; ++i) {
        current_statement__ = 13;
        stan::model::assign(ku,
          (stan::math::logical_eq(
             stan::model::rvalue(ku_nest, "ku_nest",
               stan::model::index_uni(i)), 0) ? 0 : stan::math::pow(10,
                                                      stan::model::rvalue(
                                                        log10ku, "log10ku",
                                                        stan::model::index_uni(
                                                          i)))),
          "assigning variable ku", stan::model::index_uni(i));
        current_statement__ = 14;
        stan::model::assign(ke,
          (stan::math::logical_eq(
             stan::model::rvalue(ke_nest, "ke_nest",
               stan::model::index_uni(i)), 0) ? 0 : stan::math::pow(10,
                                                      stan::model::rvalue(
                                                        log10ke, "log10ke",
                                                        stan::model::index_uni(
                                                          i)))),
          "assigning variable ke", stan::model::index_uni(i));
        current_statement__ = 17;
        for (int j = 1; j <= N_comp; ++j) {
          current_statement__ = 15;
          stan::model::assign(k,
            (stan::math::logical_eq(
               stan::model::rvalue(k_nest, "k_nest",
                 stan::model::index_uni(i), stan::model::index_uni(j)), 0) ? 0 : 
            stan::math::pow(10,
              stan::model::rvalue(log10k, "log10k",
                stan::model::index_uni(i), stan::model::index_uni(j)))),
            "assigning variable k", stan::model::index_uni(i),
            stan::model::index_uni(j));
        }
      }
      current_statement__ = 20;
      stan::model::assign(E, matrix_E(ke, k, N_comp, pstream__),
        "assigning variable E");
      current_statement__ = 21;
      stan::model::assign(I, matrix_I(N_comp, pstream__),
        "assigning variable I");
      current_statement__ = 22;
      stan::model::assign(Cpred_comp,
        exact_AD_long(time_obs_comp, N_obs_comp, tacc, E, I, ku, N_comp,
          val_obs_exp, pstream__), "assigning variable Cpred_comp");
      if (emit_transformed_parameters__) {
        out__.write(Cpred_comp);
        out__.write(ku);
        out__.write(ke);
        out__.write(k);
        out__.write(E);
        out__.write(I);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<std::vector<double>> val_pred_comp =
        std::vector<std::vector<double>>(N_obs_comp,
          std::vector<double>(N_comp,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<std::vector<double>>> log_lik =
        std::vector<std::vector<std::vector<double>>>(N_obs_comp,
          std::vector<std::vector<double>>(N_rep,
            std::vector<double>(N_comp,
              std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 27;
      for (int i_comp = 1; i_comp <= N_comp; ++i_comp) {
        current_statement__ = 25;
        for (int t = 1; t <= N_obs_comp; ++t) {
          current_statement__ = 23;
          stan::model::assign(val_pred_comp,
            stan::math::normal_rng(
              stan::model::rvalue(Cpred_comp, "Cpred_comp",
                stan::model::index_uni(t), stan::model::index_uni(i_comp)),
              stan::model::rvalue(sigma, "sigma",
                stan::model::index_uni(i_comp)), base_rng__),
            "assigning variable val_pred_comp", stan::model::index_uni(t),
            stan::model::index_uni(i_comp));
        }
      }
      current_statement__ = 34;
      for (int i_rep = 1; i_rep <= N_rep; ++i_rep) {
        current_statement__ = 32;
        for (int i = 1; i <= N_obs_comp; ++i) {
          current_statement__ = 30;
          for (int i_comp = 1; i_comp <= N_comp; ++i_comp) {
            current_statement__ = 28;
            stan::model::assign(log_lik,
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(val_obs_comp, "val_obs_comp",
                  stan::model::index_uni(i), stan::model::index_uni(i_rep),
                  stan::model::index_uni(i_comp)),
                stan::model::rvalue(Cpred_comp, "Cpred_comp",
                  stan::model::index_uni(i), stan::model::index_uni(i_comp)),
                stan::model::rvalue(sigma, "sigma",
                  stan::model::index_uni(i_comp))),
              "assigning variable log_lik", stan::model::index_uni(i),
              stan::model::index_uni(i_rep), stan::model::index_uni(i_comp));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_obs_comp; ++sym2__) {
          out__.write(val_pred_comp[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_rep; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N_obs_comp; ++sym3__) {
            out__.write(log_lik[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> log10ku =
        std::vector<local_scalar_t__>(N_comp, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(log10ku,
        in__.read<std::vector<local_scalar_t__>>(N_comp),
        "assigning variable log10ku");
      out__.write(log10ku);
      std::vector<local_scalar_t__> log10ke =
        std::vector<local_scalar_t__>(N_comp, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(log10ke,
        in__.read<std::vector<local_scalar_t__>>(N_comp),
        "assigning variable log10ke");
      out__.write(log10ke);
      std::vector<std::vector<local_scalar_t__>> log10k =
        std::vector<std::vector<local_scalar_t__>>(N_comp,
          std::vector<local_scalar_t__>(N_comp, DUMMY_VAR__));
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= N_comp; ++sym2__) {
          current_statement__ = 3;
          log10k[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write(log10k);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(N_comp, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(sigma,
        in__.read<std::vector<local_scalar_t__>>(N_comp),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "log10ku",
        "double", std::vector<size_t>{static_cast<size_t>(N_comp)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "log10ke",
        "double", std::vector<size_t>{static_cast<size_t>(N_comp)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "log10k", "double",
        std::vector<size_t>{static_cast<size_t>(N_comp),
          static_cast<size_t>(N_comp)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(N_comp)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> log10ku =
        std::vector<local_scalar_t__>(N_comp, DUMMY_VAR__);
      current_statement__ = 1;
      log10ku = context__.vals_r("log10ku");
      out__.write(log10ku);
      std::vector<local_scalar_t__> log10ke =
        std::vector<local_scalar_t__>(N_comp, DUMMY_VAR__);
      current_statement__ = 2;
      log10ke = context__.vals_r("log10ke");
      out__.write(log10ke);
      std::vector<std::vector<local_scalar_t__>> log10k =
        std::vector<std::vector<local_scalar_t__>>(N_comp,
          std::vector<local_scalar_t__>(N_comp, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> log10k_flat__;
        current_statement__ = 3;
        log10k_flat__ = context__.vals_r("log10k");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= N_comp; ++sym2__) {
            current_statement__ = 3;
            stan::model::assign(log10k, log10k_flat__[(pos__ - 1)],
              "assigning variable log10k", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(log10k);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(N_comp, DUMMY_VAR__);
      current_statement__ = 4;
      sigma = context__.vals_r("sigma");
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"log10ku", "log10ke", "log10k",
                "sigma"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"Cpred_comp", "ku", "ke", "k", "E", "I"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"val_pred_comp", "log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    N_comp)},
                std::vector<size_t>{static_cast<size_t>(N_comp)},
                std::vector<size_t>{static_cast<size_t>(N_comp),
                  static_cast<size_t>(N_comp)},
                std::vector<size_t>{static_cast<size_t>(N_comp)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_obs_comp),
               static_cast<size_t>(N_comp)},
             std::vector<size_t>{static_cast<size_t>(N_comp)},
             std::vector<size_t>{static_cast<size_t>(N_comp)},
             std::vector<size_t>{static_cast<size_t>(N_comp),
               static_cast<size_t>(N_comp)},
             std::vector<size_t>{static_cast<size_t>(N_comp),
               static_cast<size_t>(N_comp)},
             std::vector<size_t>{static_cast<size_t>(N_comp),
               static_cast<size_t>(N_comp)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_obs_comp),
               static_cast<size_t>(N_comp)},
             std::vector<size_t>{static_cast<size_t>(N_obs_comp),
               static_cast<size_t>(N_rep), static_cast<size_t>(N_comp)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10ku" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10ke" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N_comp; ++sym2__) {
        param_names__.emplace_back(std::string() + "log10k" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_obs_comp; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cpred_comp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        param_names__.emplace_back(std::string() + "ku" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        param_names__.emplace_back(std::string() + "ke" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_comp; ++sym2__) {
          param_names__.emplace_back(std::string() + "k" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_comp; ++sym2__) {
          param_names__.emplace_back(std::string() + "E" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_comp; ++sym2__) {
          param_names__.emplace_back(std::string() + "I" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_obs_comp; ++sym2__) {
          param_names__.emplace_back(std::string() + "val_pred_comp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_rep; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N_obs_comp; ++sym3__) {
            param_names__.emplace_back(std::string() + "log_lik" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10ku" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10ke" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N_comp; ++sym2__) {
        param_names__.emplace_back(std::string() + "log10k" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_obs_comp; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cpred_comp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        param_names__.emplace_back(std::string() + "ku" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        param_names__.emplace_back(std::string() + "ke" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_comp; ++sym2__) {
          param_names__.emplace_back(std::string() + "k" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_comp; ++sym2__) {
          param_names__.emplace_back(std::string() + "E" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_comp; ++sym2__) {
          param_names__.emplace_back(std::string() + "I" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_obs_comp; ++sym2__) {
          param_names__.emplace_back(std::string() + "val_pred_comp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_rep; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N_obs_comp; ++sym3__) {
            param_names__.emplace_back(std::string() + "log_lik" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"log10ku\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log10ke\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log10k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"Cpred_comp\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_obs_comp) + ",\"cols\":" + std::to_string(N_comp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ku\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_comp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_comp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_comp) + ",\"cols\":" + std::to_string(N_comp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"E\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_comp) + ",\"cols\":" + std::to_string(N_comp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"I\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_comp) + ",\"cols\":" + std::to_string(N_comp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"val_pred_comp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_obs_comp) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_obs_comp) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_rep) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"log10ku\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log10ke\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log10k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"Cpred_comp\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_obs_comp) + ",\"cols\":" + std::to_string(N_comp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ku\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_comp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_comp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_comp) + ",\"cols\":" + std::to_string(N_comp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"E\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_comp) + ",\"cols\":" + std::to_string(N_comp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"I\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_comp) + ",\"cols\":" + std::to_string(N_comp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"val_pred_comp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_obs_comp) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_obs_comp) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_rep) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_comp) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((N_comp + N_comp) + (N_comp * N_comp)) +
      N_comp);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((N_obs_comp * N_comp) + N_comp) + N_comp) + (N_comp * N_comp)) +
      (N_comp * N_comp)) + (N_comp * N_comp)));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((N_obs_comp * N_comp) + ((N_obs_comp * N_rep) * N_comp)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((N_comp + N_comp) + (N_comp * N_comp)) +
      N_comp);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((N_obs_comp * N_comp) + N_comp) + N_comp) + (N_comp * N_comp)) +
      (N_comp * N_comp)) + (N_comp * N_comp)));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((N_obs_comp * N_comp) + ((N_obs_comp * N_rep) * N_comp)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_PBK_AD_namespace::model_PBK_AD;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_PBK_AD_namespace::profiles__;
}
#endif
#endif
